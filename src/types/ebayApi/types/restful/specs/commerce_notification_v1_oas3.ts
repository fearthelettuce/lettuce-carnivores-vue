/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/public_key/{public_key_id}": {
    /** @description This method allows users to retrieve a public key using a specified key ID. The public key that is returned in the response payload is used to process and validate eBay notifications.<br /><br />The public key ID, which is a required request parameter for this method, is retrieved from the Base64-encoded <b>X-EBAY-SIGNATURE</b> header that is included in the eBay notification.<br /><br /><span class="tablenote"><b>Note:</b> For more details about how to process eBay push notifications and validate notification message payloads, see the <a href="/api-docs/commerce/notification/overview.html">Notification API overview</a>.</span> */
    get: operations["getPublicKey"];
  };
  "/topic/{topic_id}": {
    /** @description This method allows applications to retrieve details for the specified topic. This information includes supported schema versions, formats, and other metadata for the topic.<br /><br />Applications can subscribe to any of the topics for a supported schema version and format, limited by the authorization scopes required to subscribe to the topic.<br /><br />A topic specifies the type of information to be received and the data types associated with an event. An event occurs in the eBay system, such as when a user requests deletion or revokes access for an application. An event is an instance of an event type (topic).<br /><br />Specify the topic to retrieve using the <b>topic_id</b> URI parameter.<br /><br /><span class="tablenote"><b>Note:</b> Use the <a href="/api-docs/commerce/notification/resources/topic/methods/getTopics">getTopics</a> method to find a topic if you do not know the topic ID.</span> */
    get: operations["getTopic"];
  };
  "/topic": {
    /** @description This method returns a paginated collection of all supported topics, along with the details for the topics. This information includes supported schema versions, formats, and other metadata for the topics.<br /><br />Applications can subscribe to any of the topics for a supported schema version and format, limited by the authorization scopes required to subscribe to the topic.<br /><br />A topic specifies the type of information to be received and the data types associated with an event. An event occurs in the eBay system, such as when a user requests deletion or revokes access for an application. An event is an instance of an event type (topic). */
    get: operations["getTopics"];
  };
  "/subscription": {
    /** @description This method allows applications to retrieve a list of all subscriptions. The list returned is a paginated collection of subscription resources.<br /><br />Subscriptions allow applications to express interest in notifications and keep receiving the information relevant to their business. */
    get: operations["getSubscriptions"];
    /** @description This method allows applications to create a subscription for a topic and supported schema version. Subscriptions allow applications to express interest in notifications and keep receiving the information relevant to their business.<br/><br/>Each application and topic-schema pairing to a subscription should have a 1:1 cardinality.<br/><br/>You can create the subscription in disabled mode, test it (see the <b>test</b> method), and when everything is ready, you can enable the subscription (see the <b>enableSubscription</b> method).<br /><br /><span class="tablenote"><b>Note:</b> If an application is not authorized to subscribe to a topic, for example, if your authorization does not include the list of scopes required for the topic, an error code of 195011 is returned.</span> */
    post: operations["createSubscription"];
  };
  "/subscription/{subscription_id}": {
    /** @description This method allows applications to retrieve subscription details for the specified subscription.<br /><br />Specify the subscription to retrieve using the <strong>subscription_id</strong>. Use the <strong>getSubscriptions</strong> method to browse all subscriptions if you do not know the <strong>subscription_id</strong>.<br /><br />Subscriptions allow applications to express interest in notifications and keep receiving the information relevant to their business. */
    get: operations["getSubscription"];
    /** @description This method allows applications to update a subscription. Subscriptions allow applications to express interest in notifications and keep receiving the information relevant to their business.<br /><br /><span class="tablenote"><b>Note:</b> This call returns an error if an application is not authorized to subscribe to a topic.</span><br/><br/>You can pause and restart a subscription. See the <b>disableSubscription</b> and <b>enableSubscription</b> methods. */
    put: operations["updateSubscription"];
    /** @description This method allows applications to delete a subscription. Subscriptions can be deleted regardless of status. */
    delete: operations["deleteSubscription"];
  };
  "/subscription/{subscription_id}/enable": {
    /** @description This method allows applications to enable a disabled subscription. To pause (or disable) an enabled subscription, call <strong>disableSubscription</strong>. */
    post: operations["enableSubscription"];
  };
  "/subscription/{subscription_id}/disable": {
    /** @description This method disables a subscription, which prevents the subscription from providing notifications. To restart a subscription, call <strong>enableSubscription</strong>. */
    post: operations["disableSubscription"];
  };
  "/subscription/{subscription_id}/test": {
    /** @description This method triggers a mocked test payload that includes a notification ID, publish date, and so on. Use this method to test your subscription end-to-end.<br /><br />You can create the subscription in disabled mode, test it using this method, and when everything is ready, you can enable the subscription (see the <strong>enableSubscription</strong> method).<br /><br /><span class="tablenote"><b>Note:</b> Use the <strong>notificationId</strong> to tell the difference between a test payload and a real payload.</span> */
    post: operations["test"];
  };
  "/destination": {
    /** @description This method allows applications to retrieve a paginated collection of destination resources and related details. The details include the destination names, statuses, and configurations, including the endpoints and verification tokens. */
    get: operations["getDestinations"];
    /** @description This method allows applications to create a destination. A destination is an endpoint that receives HTTP push notifications.<br /><br />A single destination for all topics is valid, as is individual destinations for each topic.<br /><br />To update a destination, use the <strong>updateDestination</strong> call.<br /><br />The destination created will need to be referenced while creating or updating a subscription to a topic.<br/><br/><span class="tablenote"><b>Note:</b> The destination should be created and ready to respond with the expected <b>challengeResponse</b> for the endpoint to be registered successfully. Refer to the <a href="/api-docs/commerce/notification/overview.html">Notification API overview</a> for more information.</span> */
    post: operations["createDestination"];
  };
  "/destination/{destination_id}": {
    /** @description This method allows applications to fetch the details for a destination. The details include the destination name, status, and configuration, including the endpoint and verification token. */
    get: operations["getDestination"];
    /** @description This method allows applications to update a destination.<br/><br/><span class="tablenote"><b>Note:</b> The destination should be created and ready to respond with the expected <b>challengeResponse</b> for the endpoint to be registered successfully. Refer to the <a href="/api-docs/commerce/notification/overview.html">Notification API overview</a> for more information.</span> */
    put: operations["updateDestination"];
    /** @description This method provides applications a way to delete a destination.<br /><br />The same destination ID can be used by many destinations.<br /><br />Trying to delete an active destination results in an error. You can disable a subscription, and when the destination is no longer in use, you can delete it. */
    delete: operations["deleteDestination"];
  };
  "/config": {
    /** @description This method allows applications to retrieve a previously created configuration. */
    get: operations["getConfig"];
    /** @description This method allows applications to create a new configuration or update an existing configuration. This app-level configuration allows developers to set up alerts. */
    put: operations["updateConfig"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description The type that defines the fields for the <b>alertEmail</b> field. */
    Config: {
      /** @description The alert email address for this application. */
      alertEmail?: string;
    };
    /** @description This type contains information about a subscription request. */
    CreateSubscriptionRequest: {
      /** @description The unique identifier for the topic associated with this subscription. */
      topicId?: string;
      /** @description The status of this subscription. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:SubscriptionStatusEnum'>eBay API documentation</a> */
      status?: string;
      /** @description The payload associated with this subscription. */
      payload?: components["schemas"]["SubscriptionPayloadDetail"];
      /** @description The unique identifier for the destination associated with this subscription. */
      destinationId?: string;
    };
    /** @description A type that contains information about the delivery configuration. */
    DeliveryConfig: {
      /** @description The endpoint for this destination. */
      endpoint?: string;
      /** @description The verification token associated with this endpoint. */
      verificationToken?: string;
    };
    /** @description A type that contains information about the destination. */
    Destination: {
      /** @description The unique identifier for the destination. */
      destinationId?: string;
      /** @description The name associated with this destination. */
      name?: string;
      /** @description The status for this destination.<br /><br /><span class="tablenote"><b>Note:</b> The <b>MARKED_DOWN</b> value is set by eBay systems and cannot be used in a create or update call by applications.</span><br /><br /><b>Valid values:</b><ul><li><code>ENABLED</code></li><li><code>DISABLED</code></li><li><code>MARKED_DOWN</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:DestinationStatusEnum'>eBay API documentation</a> */
      status?: string;
      /** @description The configuration associated with this destination. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/desination'>eBay API documentation</a> */
      deliveryConfig?: string;
    };
    /** @description A type that contains information about the destination request. */
    DestinationRequest: {
      /** @description The name associated with this destination. */
      name?: string;
      /** @description The status for this destination.<br /><br /><span class="tablenote"><b>Note:</b> The <b>MARKED_DOWN</b> value is set by eBay systems and cannot be used in a create or update call by applications.</span><br /><br /><b>Valid values:</b><ul><li><code>ENABLED</code></li><li><code>DISABLED</code></li><li><code>MARKED_DOWN</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:DestinationStatusEnum'>eBay API documentation</a> */
      status?: string;
      /** @description The configuration associated with this destination. */
      deliveryConfig?: components["schemas"]["DeliveryConfig"];
    };
    /** @description A type that contains information about the destination search response. */
    DestinationSearchResponse: {
      /**
       * Format: int32 
       * @description The total number of matches for the search criteria.
       */
      total?: number;
      /** @description The path to the call URI that produced the current page of results. */
      href?: string;
      /** @description The URL to access the next set of results. This field includes a <strong>continuation_token</strong>. No <b>prev</b> field is returned, but this value is persistent during the session so that you can use it to return to the next page.<br><br>This field is not returned if fewer records than specified by the <strong>limit</strong> field are returned. */
      next?: string;
      /**
       * Format: int32 
       * @description The number of records to show in the current response.<br /><br /><b>Default:</b> 20
       */
      limit?: number;
      /** @description An array that contains the destination details. */
      destinations?: (components["schemas"]["Destination"])[];
    };
    /** @description This type defines the fields that can be returned in an error. */
    Error: {
      /** @description Identifies the type of erro. */
      category?: string;
      /** @description Name for the primary system where the error occurred. This is relevant for application errors. */
      domain?: string;
      /**
       * Format: int32 
       * @description A unique number to identify the error.
       */
      errorId?: number;
      /** @description An array of request elements most closely associated to the error. */
      inputRefIds?: (string)[];
      /** @description A more detailed explanation of the error. */
      longMessage?: string;
      /** @description Information on how to correct the problem, in the end user's terms and language where applicable. */
      message?: string;
      /** @description An array of request elements most closely associated to the error. */
      outputRefIds?: (string)[];
      /** @description An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned. */
      parameters?: (components["schemas"]["ErrorParameter"])[];
      /** @description Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc. */
      subdomain?: string;
    };
    ErrorParameter: {
      /** @description The object of the error. */
      name?: string;
      /** @description The value of the object. */
      value?: string;
    };
    /** @description A type that describes the details about a topic's payload. */
    PayloadDetail: {
      /** @description The supported schema version. */
      schemaVersion?: string;
      /** @description The supported format. Presently, <code>JSON</code> is the only supported format. */
      format?: (string)[];
      /** @description The supported delivery protocols. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:ProtocolEnum'>eBay API documentation</a> */
      deliveryProtocol?: string;
      /** @description A deprecation indicator. */
      deprecated?: boolean;
    };
    /** @description A type that defines the public key for a unique key ID. */
    PublicKey: {
      /** @description The algorithm associated with the public key that is returned, such as Elliptic Curve Digital Signature Algorithm (ECDSA). */
      algorithm?: string;
      /** @description The digest associated with the public key that is returned, such as Secure Hash Algorithm 1 (SHA1). */
      digest?: string;
      /** @description The public key that is returned for the specified key ID.<br /><br />This value is used to validate the eBay push notification message payload. */
      key?: string;
    };
    /** @description A type that describes the subscription. */
    Subscription: {
      /** @description The unique identifier for the subscription. */
      subscriptionId?: string;
      /** @description The unique identifier for the topic associated with this subscription. */
      topicId?: string;
      /** @description The status of this subscription. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:SubscriptionStatusEnum'>eBay API documentation</a> */
      status?: string;
      /** @description The creation date for this subscription. */
      creationDate?: string;
      /** @description The payload associated with this subscription. */
      payload?: components["schemas"]["SubscriptionPayloadDetail"];
      /** @description The unique identifier for the destination associated with this subscription. */
      destinationId?: string;
    };
    /** @description A type that describes the details of the subscription payload. */
    SubscriptionPayloadDetail: {
      /** @description The supported format. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:FormatTypeEnum'>eBay API documentation</a> */
      format?: string;
      /** @description The supported schema version. */
      schemaVersion?: string;
      /** @description The supported protocol. For exmaple: <code>HTTPS</code> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:ProtocolEnum'>eBay API documentation</a> */
      deliveryProtocol?: string;
    };
    /** @description A type that describes the details of the subscription search response. */
    SubscriptionSearchResponse: {
      /**
       * Format: int32 
       * @description The total number of matches for the search criteria.
       */
      total?: number;
      /** @description The path to the call URI that produced the current page of results. */
      href?: string;
      /** @description The URL to access the next set of results. This field includes a <strong>continuation_token</strong>. No <b>prev</b> field is returned, but this value is persistent during the session so that you can use it to return to the next page.<br><br>This field is not returned if fewer records than specified by the <strong>limit</strong> field are returned. */
      next?: string;
      /**
       * Format: int32 
       * @description The value of the limit parameter submitted in the request, which is the maximum number of items to return per page, from the result set. A result set is the complete set of results returned by the method.<br /><br /><span class="tablenote"><b>Note:</b> Though this parameter is not required to be submitted in the request, the parameter defaults to <code>20</code> if omitted.</span><br /><br /><b>Default:</b> 20
       */
      limit?: number;
      /** @description The subscriptions that match the search criteria. */
      subscriptions?: (components["schemas"]["Subscription"])[];
    };
    /** @description A type that describes the details of the topic. */
    Topic: {
      /** @description The unique identifier for the topic. */
      topicId?: string;
      /** @description The description of the topic. */
      description?: string;
      /** @description The authorization scopes required to subscribe to this topic. */
      authorizationScopes?: (string)[];
      /** @description The status of this topic. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:StatusEnum'>eBay API documentation</a> */
      status?: string;
      /** @description The business context associated with this topic. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:ContextEnum'>eBay API documentation</a> */
      context?: string;
      /** @description The scope of this topic. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:ScopeEnum'>eBay API documentation</a> */
      scope?: string;
      /** @description The supported payloads for this topic. */
      supportedPayloads?: (components["schemas"]["PayloadDetail"])[];
    };
    /** @description A type that describes the details of the topic search response. */
    TopicSearchResponse: {
      /**
       * Format: int32 
       * @description The total number of matches for the search criteria.
       */
      total?: number;
      /** @description The path to the call URI that produced the current page of results. */
      href?: string;
      /** @description The URL to access the next set of results. This field includes a <strong>continuation_token</strong>. No <b>prev</b> field is returned, but this value is persistent during the session so that you can use it to return to the next page.<br><br>This field is not returned if fewer records than specified by the <strong>limit</strong> field are returned. */
      next?: string;
      /**
       * Format: int32 
       * @description The value of the limit parameter submitted in the request, which is the maximum number of items to return per page, from the result set. A result set is the complete set of results returned by the method.<br /><br /><span class="tablenote"><b>Note:</b> Though this parameter is not required to be submitted in the request, the parameter defaults to <code>20</code> if omitted.</span>
       */
      limit?: number;
      /** @description An array of topics that match the specified criteria. */
      topics?: (components["schemas"]["Topic"])[];
    };
    /** @description A type that describes the details of the update subscription request. */
    UpdateSubscriptionRequest: {
      /** @description The status of this subscription. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/notification/types/api:SubscriptionStatusEnum'>eBay API documentation</a> */
      status?: string;
      /** @description The payload associated with this subscription. */
      payload?: components["schemas"]["SubscriptionPayloadDetail"];
      /** @description The unique identifier for the destination associated with this subscription. */
      destinationId?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** @description This method allows users to retrieve a public key using a specified key ID. The public key that is returned in the response payload is used to process and validate eBay notifications.<br /><br />The public key ID, which is a required request parameter for this method, is retrieved from the Base64-encoded <b>X-EBAY-SIGNATURE</b> header that is included in the eBay notification.<br /><br /><span class="tablenote"><b>Note:</b> For more details about how to process eBay push notifications and validate notification message payloads, see the <a href="/api-docs/commerce/notification/overview.html">Notification API overview</a>.</span> */
  getPublicKey: {
    parameters: {
      path: {
        /** @description The unique key ID that is used to retrieve the public key.<br /><br /><span class="tablenote"><b>Note: </b>This is retrieved from the <b>X-EBAY-SIGNATURE</b> header that is included with the push notification.</span> */
        public_key_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PublicKey"];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to retrieve details for the specified topic. This information includes supported schema versions, formats, and other metadata for the topic.<br /><br />Applications can subscribe to any of the topics for a supported schema version and format, limited by the authorization scopes required to subscribe to the topic.<br /><br />A topic specifies the type of information to be received and the data types associated with an event. An event occurs in the eBay system, such as when a user requests deletion or revokes access for an application. An event is an instance of an event type (topic).<br /><br />Specify the topic to retrieve using the <b>topic_id</b> URI parameter.<br /><br /><span class="tablenote"><b>Note:</b> Use the <a href="/api-docs/commerce/notification/resources/topic/methods/getTopics">getTopics</a> method to find a topic if you do not know the topic ID.</span> */
  getTopic: {
    parameters: {
      path: {
        /** @description The ID of the topic for which to retrieve the details. */
        topic_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Topic"];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method returns a paginated collection of all supported topics, along with the details for the topics. This information includes supported schema versions, formats, and other metadata for the topics.<br /><br />Applications can subscribe to any of the topics for a supported schema version and format, limited by the authorization scopes required to subscribe to the topic.<br /><br />A topic specifies the type of information to be received and the data types associated with an event. An event occurs in the eBay system, such as when a user requests deletion or revokes access for an application. An event is an instance of an event type (topic). */
  getTopics: {
    parameters: {
      query?: {
        /** @description The maximum number of items to return per page from the result set. A result set is the complete set of results returned by the method. Range is from 10-100. <br /><br />If this parameter is omitted, the default value is used.<br/><br/><b> Default:</b> 20<br /><br /><b>Maximum:</b> 100 items per page */
        limit?: string;
        /** @description The token used to access the next set of results. */
        continuation_token?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TopicSearchResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to retrieve a list of all subscriptions. The list returned is a paginated collection of subscription resources.<br /><br />Subscriptions allow applications to express interest in notifications and keep receiving the information relevant to their business. */
  getSubscriptions: {
    parameters: {
      query?: {
        /** @description The number of items, from the result set, returned in a single page. Range is from 10-100. If this parameter is omitted, the default value is used.<br/><br/><b>Default:</b> 20<br/><br/><b>Maximum:</b> 100 items per page */
        limit?: string;
        /** @description The continuation token for the next set of results. */
        continuation_token?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionSearchResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to create a subscription for a topic and supported schema version. Subscriptions allow applications to express interest in notifications and keep receiving the information relevant to their business.<br/><br/>Each application and topic-schema pairing to a subscription should have a 1:1 cardinality.<br/><br/>You can create the subscription in disabled mode, test it (see the <b>test</b> method), and when everything is ready, you can enable the subscription (see the <b>enableSubscription</b> method).<br /><br /><span class="tablenote"><b>Note:</b> If an application is not authorized to subscribe to a topic, for example, if your authorization does not include the list of scopes required for the topic, an error code of 195011 is returned.</span> */
  createSubscription: {
    /** @description The create subscription request. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateSubscriptionRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          Location?: string;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Forbidden */
      403: never;
      /** @description Conflict */
      409: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to retrieve subscription details for the specified subscription.<br /><br />Specify the subscription to retrieve using the <strong>subscription_id</strong>. Use the <strong>getSubscriptions</strong> method to browse all subscriptions if you do not know the <strong>subscription_id</strong>.<br /><br />Subscriptions allow applications to express interest in notifications and keep receiving the information relevant to their business. */
  getSubscription: {
    parameters: {
      path: {
        /** @description The unique identifier for the subscription. */
        subscription_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to update a subscription. Subscriptions allow applications to express interest in notifications and keep receiving the information relevant to their business.<br /><br /><span class="tablenote"><b>Note:</b> This call returns an error if an application is not authorized to subscribe to a topic.</span><br/><br/>You can pause and restart a subscription. See the <b>disableSubscription</b> and <b>enableSubscription</b> methods. */
  updateSubscription: {
    parameters: {
      path: {
        /** @description The unique identifier for the subscription. */
        subscription_id: string;
      };
    };
    /** @description The create subscription request. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateSubscriptionRequest"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Conflict */
      409: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to delete a subscription. Subscriptions can be deleted regardless of status. */
  deleteSubscription: {
    parameters: {
      path: {
        /** @description The unique identifier for the subscription. */
        subscription_id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to enable a disabled subscription. To pause (or disable) an enabled subscription, call <strong>disableSubscription</strong>. */
  enableSubscription: {
    parameters: {
      path: {
        /** @description The unique identifier for the subscription. */
        subscription_id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Conflict */
      409: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method disables a subscription, which prevents the subscription from providing notifications. To restart a subscription, call <strong>enableSubscription</strong>. */
  disableSubscription: {
    parameters: {
      path: {
        /** @description The unique identifier for the subscription. */
        subscription_id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method triggers a mocked test payload that includes a notification ID, publish date, and so on. Use this method to test your subscription end-to-end.<br /><br />You can create the subscription in disabled mode, test it using this method, and when everything is ready, you can enable the subscription (see the <strong>enableSubscription</strong> method).<br /><br /><span class="tablenote"><b>Note:</b> Use the <strong>notificationId</strong> to tell the difference between a test payload and a real payload.</span> */
  test: {
    parameters: {
      path: {
        /** @description The unique identifier for the subscription. */
        subscription_id: string;
      };
    };
    responses: {
      /** @description Accepted */
      202: never;
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to retrieve a paginated collection of destination resources and related details. The details include the destination names, statuses, and configurations, including the endpoints and verification tokens. */
  getDestinations: {
    parameters: {
      query?: {
        /** @description The number of items, from the result set, returned in a single page. Range is from 10-100. If this parameter is omitted, the default value is used.<br/><br/><b>Default:</b> 20<br/><br/><b>Maximum:</b> 100 items per page */
        limit?: string;
        /** @description The continuation token for the next set of results. */
        continuation_token?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DestinationSearchResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to create a destination. A destination is an endpoint that receives HTTP push notifications.<br /><br />A single destination for all topics is valid, as is individual destinations for each topic.<br /><br />To update a destination, use the <strong>updateDestination</strong> call.<br /><br />The destination created will need to be referenced while creating or updating a subscription to a topic.<br/><br/><span class="tablenote"><b>Note:</b> The destination should be created and ready to respond with the expected <b>challengeResponse</b> for the endpoint to be registered successfully. Refer to the <a href="/api-docs/commerce/notification/overview.html">Notification API overview</a> for more information.</span> */
  createDestination: {
    /** @description The create destination request. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DestinationRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          Location?: string;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Conflict */
      409: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to fetch the details for a destination. The details include the destination name, status, and configuration, including the endpoint and verification token. */
  getDestination: {
    parameters: {
      path: {
        /** @description The unique identifier for the destination. */
        destination_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Destination"];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to update a destination.<br/><br/><span class="tablenote"><b>Note:</b> The destination should be created and ready to respond with the expected <b>challengeResponse</b> for the endpoint to be registered successfully. Refer to the <a href="/api-docs/commerce/notification/overview.html">Notification API overview</a> for more information.</span> */
  updateDestination: {
    parameters: {
      path: {
        /** @description The unique identifier for the destination. */
        destination_id: string;
      };
    };
    /** @description The create subscription request. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DestinationRequest"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Conflict */
      409: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method provides applications a way to delete a destination.<br /><br />The same destination ID can be used by many destinations.<br /><br />Trying to delete an active destination results in an error. You can disable a subscription, and when the destination is no longer in use, you can delete it. */
  deleteDestination: {
    parameters: {
      path: {
        /** @description The unique identifier for the destination. */
        destination_id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Conflict */
      409: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to retrieve a previously created configuration. */
  getConfig: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Config"];
        };
      };
      /** @description Not Found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method allows applications to create a new configuration or update an existing configuration. This app-level configuration allows developers to set up alerts. */
  updateConfig: {
    /** @description The configurations for this application. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Config"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
}
